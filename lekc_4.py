'''
a = 42
print(type(a), id (a))
print(type(id))

# very_bad_programming_style = sum
# print(very_bad_programming_style [1,2,3])

#  —Å–ª–æ–≤–æ def
def my_func():
    pass

# —Å–ª–æ–≤–æ pass

if a != 5:  –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ê –Ω–µ —Ä–∞–≤–Ω–æ 5 
    pass          —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ  –Ω–µ–¥–µ–ª–∞–µ–º, —Ç.–µ –º—ã —Å–∫–∞–∑–∞–ª–∏ —á—Ç–æ –Ω—É–∂–µ–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥ –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É, –Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ
else: a += 1  –∏–Ω–∞—á–µ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É 


if a == 5: –µ—Å–ª–∏ –∞  —Ä–∞–≤–Ω–æ 5 
 a += 1  —Ç–æ–≥–¥–∞ –ê —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1 
    else: 
pass –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ

# –í –ø–∞–π—Ç–æ–Ω –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ if –∏ else. –æ—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 

if a == 5: 
a += 1 

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏

def quadratic_equations(a: int | float, b: int | float, c: int |
float) -> tuple[float, float] | float | str:
    d = b ** 2 - 4 * a * c
    if d > 0:
        return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 *a)
    elif d == 0:
        return -b / (2 * a)
    else:
        return '–ù–µ—Ç —Ä–µ—à–µ–Ω–∏–π'
print(quadratic_equations(2, -3, -9))

# –ò–∑–º–µ–Ω—è–µ–º—ã–µ –∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

def no_mutable(a: int) -> int:
    a += 1
    print(f'In func {a = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    return a

a = 42
print(f'In main {a = }')
z = no_mutable(a)
print(f'{a = }\t{z = }')

# –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

def mutable(data: list[int]) -> list[int]:
    for i, item in enumerate(data):
        data[i] = item + 1
    print(f'In func {data = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    return data

my_list = [2, 4, 6, 8]
print(f'In main {my_list = }')
new_list = mutable(my_list)
print(f'{my_list = }\t{new_list = }')

# –í–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, return
def quadratic_equations(a, b, c):
    d = b ** 2 - 4 * a * c
    if d > 0:
        return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 *a)
    if d == 0:
        return -b / (2 * a)
    return None
print(quadratic_equations(2, -3, -9))

# –ù–µ—è–≤–Ω—ã–π return 
def no_return(data: list[int]):
    for i, item in enumerate(data):
        data[i] = item + 1
    print(f'In func {data = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

my_list = [2, 4, 6, 8]
print(f'In main {my_list = }')
new_list = no_return(my_list)
print(f'{my_list = }\t{new_list = }')

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def quadratic_equations(a, b=0, c=0):
    d = b ** 2 - 4 * a * c
    if d > 0:
        return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 *a)
    if d == 0:
        return -b / (2 * a)
print(quadratic_equations(2, -9))

# –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

def from_one_to_n(n, data=None):
    if data is None:
            data = []
    for i in range(1, n + 1):
        data.append(i)
    return data

new_list = from_one_to_n(5)
print(f'{new_list = }')
other_list = from_one_to_n(7)
print(f'{other_list = }')

# –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
# –ü—Ä–∏–º–µ—Ä –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:

def standard_arg(arg):
    print(arg) # –ü—Ä–∏–Ω—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∞ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
standard_arg(42)
standard_arg(arg=42)

#  /
def pos_only_arg(arg, /):
    print(arg) # –ü—Ä–∏–Ω—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∞ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
pos_only_arg(42)
pos_only_arg(arg=42) # TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg'

# *
def kwd_only_arg(*, arg):
    print(arg) # –ü—Ä–∏–Ω—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∞ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
kwd_only_arg(42)
kwd_only_arg(arg=42)

# //–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 
def combined_example(pos_only, /, standard, *, kwd_only):
    print(pos_only, standard, kwd_only) # –ü—Ä–∏–Ω—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∞ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
# combined_example(1, 2, 3) # TypeError: combined_example() takes 2 positional arguments but 3 were given
combined_example(1, 2, kwd_only=3)
combined_example(1, standard=2, kwd_only=3)
combined_example(pos_only=1, standard=2, kwd_only=3) #
TypeError: combined_example() got some positional-only arguments passed as keyword arguments: 'pos_only'

#  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã *args –∏ **kwargs
# args
def mean(args):
    return sum(args) / len(args)
print(mean([1, 2, 3]))
print(mean(1, 2, 3)) # TypeError: mean() takes 1 positional argument but 3 were given

#  *args
def mean(*args):
    return sum(args) / len(args)
print(mean(*[1, 2, 3]))
print(mean(1, 2, 3))


# **kwargs 
def school_print(**kwargs):
    for key, value in kwargs.items():
        print(f'–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É "{key}" –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {value}')
school_print(—Ö–∏–º–∏—è=5, —Ñ–∏–∑–∏–∫–∞=4, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞=5, —Ñ–∏–∑—Ä–∞=5)

# –û–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏: global –∏ nonlocal
# –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏. –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
def func(y: int) -> int:
    # x = 100
    x += 100
    print(f'In func {x = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    return y + 1

x = 42
print(f'In main {x = }')
z = func(x)
print(f'{x = }\t{z = }')


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
def func(y: int) -> int:
    global x
    x += 100
    print(f'In func {x = }')
    return y + 1

x = 42
print(f'In main {x = }')
z = func(x)
print(f'{x = }\t{z = }')

# –ù–µ –ª–æ–∫–∞–ª—å–Ω—ã–∞ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ù–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
def main(a):
    x = 1

    def func(y):
        nonlocal x
        x += 100
        print(f'In func {x = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ–Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        return y + 1
    
    return x + func(a)

x = 42
print(f'In main {x = }')
z = main(x)
print(f'{x = }\t{z = }')


# –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º
LIMIT = 1_000

def func(x, y):
    result = x ** y % LIMIT
    return result
print(func(42, 73))

# –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è lambda

def add_two_def(a, b):
    return a + b

add_two_lambda = lambda a, b: a + b

print(add_two_def(42, 3.14))
print(add_two_lambda(42, 3.14))

my_dict = {'two': 2, 'one': 1, 'four': 4, 'three': 3, 'ten': 10}
s_key = sorted(my_dict.items())
s_value = sorted(my_dict.items(), key=lambda x: x[1])
print(f'{s_key = }\n{s_value = }')


# –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –§ , –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π
def max_before_hundred(*args):
    """Return the maximum number not exceeding 100."""
    m = float('-inf')
    for item in args:
        if m < item < 100:
            m = item
    return m
print(max_before_hundred(-42, 73, 256, 0))


# –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –§ 
def max_before_hundred(*args):
    """Return the maximum number not exceeding 100.

    :param args: tuple of int or float numbers
    :return: int or float number from the tuple args
    """
    m = float('-inf')
    for item in args:
        if m < item < 100:
            m = item
    return m

print(max_before_hundred(-42, 73, 256, 0))
help(max_before_hundred)


# —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞

def func(a=0.0, /, b=0.0, *, c=0.0):
 """func(a=0.0: int | float, /, b=0.0: int | float, *, c=0.0: int | float) -> : int | float"""
 if a > c:
    return a
 if a < c:
    return c
 return
print(func(c=1, b=2, a=3))


# –§—É–Ω–∫—Ü–∏–∏ ‚Äú–∏–∑ –∫–æ—Ä–æ–±–∫–∏‚Äù
# –§ map()
texts = ["–ü—Ä–∏–≤–µ—Ç", "–ó–î–û–†–û–í–ê", "–ø—Ä–∏–≤–µ–¢—Å—Ç–≤—É—é"]
res = map(lambda x: x.lower(), texts)
print(*res)

# –§—É–Ω–∫—Ü–∏—è filter()
numbers = [42, -73, 1024]
res = tuple(filter(lambda x: x > 0, numbers))
print(res)

# –§—É–Ω–∫—Ü–∏—è zip()
names = ["–ò–≤–∞–Ω", "–ù–∏–∫–æ–ª–∞–π", "–ü—ë—Ç—Ä"]
salaries = [125_000, 96_000, 109_000]
awards = [0.1, 0.25, 0.13, 0.99]
for name, salary, award in zip(names, salaries, awards):
    print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f} –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary* award:.2f}')

# –§—É–Ω–∫—Ü–∏–∏ max(),
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä",
109_000)]
print(max(lst_1, default='empty'))
print(max(*lst_2))
print(max(lst_3, key=lambda x: x[1]))

# –§—É–Ω–∫—Ü–∏–∏  min() 
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä",
109_000)]
print(min(lst_1, default='empty'))
print(min(*lst_2))
print(min(lst_3, key=lambda x: x[1]))

# –§—É–Ω–∫—Ü–∏–∏ sum()
my_list = [42, 256, 73]
print(sum(my_list))
print(sum(my_list, start=1024))

# –§—É–Ω–∫—Ü–∏—è all()
def any(iterable):
    for element in iterable:
        if element:
            return True
    return False

numbers = [42, -73, 1024]
if all(map(lambda x: x > 0, numbers)):
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
else:
    print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')


# –§—É–Ω–∫—Ü–∏—è any()
def any(iterable):
    for element in iterable:
        if element:
            return True
        return False

numbers = [42, -73, 1024]
if any(map(lambda x: x > 0, numbers)):
        print('–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π')
else:
        print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª—å—à–µ –Ω—É–ª—è')

# –§—É–Ω–∫—Ü–∏—è chr()
print(chr(97))
print(chr(1105))
print(chr(128519))

# –§—É–Ω–∫—Ü–∏—è ord()

print(ord('a'))
print(ord('–∞'))
print(ord('üòâ'))

# –§—É–Ω–∫—Ü–∏—è locals(), 
SIZE = 10

def func(a, b, c):
    x = a + b
    print(locals())
    z = x + c
    return z
func(1, 2, 3)

# –§—É–Ω–∫—Ü–∏—è globals(),
SIZE = 10

def func(a, b, c):
    x = a + b
    print(globals())
    z = x + c
    return z

print(globals())
print(f'{func(1, 2, 3) = }') 

# –∏–∑–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å 
x = 42
glob_dict = globals()
glob_dict['x'] = 73
print(f'{—Ö =}')
'''
# –§—É–Ω–∫—Ü–∏—è vars()
# print(vars(int))

data = [25, -42, 146, 73, -100, 12]
print(list(map(str, data)))
print(max(data, key=lambda x: -x))
print(*filter(lambda x: not x[0].startswith('__'),globals().items()))










